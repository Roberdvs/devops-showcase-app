name: End-to-End Tests

on:
  workflow_run:
    workflows: ["Build and Push Image"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write

jobs:
  e2e-test:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Deploy to Minikube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Start minikube
        id: minikube
        uses: medyagh/setup-minikube@v0.0.20

      - uses: azure/setup-helm@v4.3.0

      - name: Add Helm repositories
        run: |
          helm repo add stakater https://stakater.github.io/stakater-charts
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - id: lower-repo
        name: Repository to lowercase
        run: |
          echo "repository=${GITHUB_REPOSITORY@L}" >> $GITHUB_OUTPUT

      - name: Pull CI image
        run: |
          # Pull the image that was built in the CI workflow
          docker pull ghcr.io/${{ steps.lower-repo.outputs.repository }}:${{ github.event.workflow_run.head_sha }}
          echo "Successfully pulled CI image: ghcr.io/${{ steps.lower-repo.outputs.repository }}:${{ github.event.workflow_run.head_sha }}"

      - name: Deploy to minikube
        run: |
          make helm-deps
          # Install with the PR-specific image tag
          make helm-install IMAGE_TAG=${{ github.event.workflow_run.head_sha }}

      - name: Wait for pods to be ready
        run: |
          echo "Waiting for application pod to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=application -n sample-app --timeout=300s
          echo "Application is ready"

      - name: Test application endpoints
        run: |
          # Get the service URL. The service name is "application" because of the stakater/application chart.
          SERVICE_URL=$(minikube service application --url -n sample-app)
          echo "Testing application at: $SERVICE_URL"

          # Wait a bit for the application to be fully ready
          sleep 30

          # Test health endpoint
          echo "Testing health endpoint..."
          curl -f "$SERVICE_URL/health" || exit 1

          # Test API documentation
          echo "Testing API docs..."
          curl -f "$SERVICE_URL/docs" || exit 1

          # Test metrics endpoint
          echo "Testing metrics endpoint..."
          curl -f "$SERVICE_URL/metrics" || exit 1

          # Test hello endpoint (create user)
          echo "Testing hello endpoint (create user)..."
          curl -f -X PUT "$SERVICE_URL/hello/testuser" \
            -H "Content-Type: application/json" \
            -d '{"dateOfBirth": "1990-01-15"}' || exit 1

          # Test hello endpoint (get user)
          echo "Testing hello endpoint (get user)..."
          curl -f "$SERVICE_URL/hello/testuser" || exit 1

          echo "All tests passed! ðŸŽ‰"

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up minikube deployment..."
          make helm-uninstall || true
          echo "Cleanup completed!"

      - name: Comment PR with test results
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = "${{ github.event.workflow_run.head_branch }}";

            // Find PRs associated with this branch
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branchName}`,
              state: 'open'
            });

            if (pulls.length > 0) {
              const comment = `## ðŸ§ª End-to-End Test Results

              **Status**: âœ… All tests passed!

              ### What was tested:
              - âœ… Minikube cluster deployment
              - âœ… Helm chart installation with CI image
              - âœ… Application deployment
              - âœ… Health endpoint
              - âœ… API documentation
              - âœ… Metrics endpoint
              - âœ… API endpoints

              ### Test Environment:
              - **Kubernetes**: Minikube (ephemeral)
              - **Database**: PostgreSQL (via Bitnami chart)
              - **Application**: FastAPI with OpenTelemetry
              - **Image**: Reused from CI workflow (\`${{ github.event.workflow_run.head_sha }}\`)

              The application was successfully deployed and all endpoints are working correctly! ðŸš€`;

              github.rest.issues.createComment({
                issue_number: pulls[0].number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              console.log('No open PR found for this branch, skipping comment');
            }
